/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SalesRole;

import Business.Enterprise.Enterprise;
import Business.Organization.FinanceDepartment;
import Business.Organization.Organization;
import Business.Organization.SalesDepartment;
import Business.Organization.Warehouse;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FinanceTestWorkRequest;
import Business.WorkQueue.ProductionTestWorkRequest;
import Business.WorkQueue.PurchasingWorkRequest;
import Business.WorkQueue.Storage;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mac
 */
public class SalesWorkPlaceJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SalesWorkPlaceJPanel
     */
    private JPanel container;
    private UserAccount account;
    private SalesDepartment organization;
    private Enterprise enterprise;
    
    public SalesWorkPlaceJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise) {
        initComponents();
        container = userProcessContainer;
        this.account = account;
        this.organization = (SalesDepartment)organization;
        this.enterprise = enterprise;
        updateOrder();
        populateOrder();
        populateRequest();
    }
    
    public void populateRequest(){
        DefaultTableModel model = (DefaultTableModel) requestjTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            PurchasingWorkRequest r = (PurchasingWorkRequest)request;
            if (r.getOrderStatus().equals("Waiting")){
                Object[] row = new Object[3];
                row[0] = request;
                row[1] = request.getMaterial().getProductionModel();
                row[2] = request.getQuantity();
                
                model.addRow(row);
            }
        }
    }
    
    public void populateOrder(){
        DefaultTableModel model = (DefaultTableModel) orderjTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getMaterial().getProductionModel();
                row[2] = request.getQuantity();
                row[3] = ((FinanceTestWorkRequest)request).getPrepareStatus();               
                if (((FinanceTestWorkRequest)request).isDeliveryStatus())  row[4] = "Delivered";
                else if (!((FinanceTestWorkRequest)request).isDeliveryStatus() && !((FinanceTestWorkRequest)request).getPrepareStatus().equals("Send"))
                    row[4] = "Prepareing";
                else row[4] = "Sending";
                model.addRow(row);
        }
    }
    
    public void updateOrder(){
        for (WorkRequest req : account.getWorkQueue().getWorkRequestList()){
            for (WorkRequest r : organization.getWorkQueue().getWorkRequestList()){
                if (req.getDeliveryNumber() == r.getDeliveryNumber() && ((PurchasingWorkRequest)r).getOrderStatus().equals("Delivered")){
                    ((FinanceTestWorkRequest)req).setDeliveryStatus(true);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestjTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        sendBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderjTable = new javax.swing.JTable();
        confirmBtn = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        cancelBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("黑体", 1, 24)); // NOI18N
        jLabel1.setText("Enterprise: ");

        jLabel2.setFont(new java.awt.Font("黑体", 1, 24)); // NOI18N
        jLabel2.setText("Request List");

        requestjTable.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        requestjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "OrderNumber", "ProductModel", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestjTable);
        if (requestjTable.getColumnModel().getColumnCount() > 0) {
            requestjTable.getColumnModel().getColumn(0).setResizable(false);
            requestjTable.getColumnModel().getColumn(1).setResizable(false);
            requestjTable.getColumnModel().getColumn(2).setResizable(false);
        }

        backBtn.setText("<<Back");

        sendBtn.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        sendBtn.setText("Ask for check inventory");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("黑体", 1, 24)); // NOI18N
        jLabel3.setText("Order List");

        orderjTable.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        orderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "DeliveryNumber", "ProductModel", "Quantity", "Prepare Status", "Shipment Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderjTable);
        if (orderjTable.getColumnModel().getColumnCount() > 0) {
            orderjTable.getColumnModel().getColumn(0).setResizable(false);
            orderjTable.getColumnModel().getColumn(1).setResizable(false);
            orderjTable.getColumnModel().getColumn(2).setResizable(false);
            orderjTable.getColumnModel().getColumn(3).setResizable(false);
            orderjTable.getColumnModel().getColumn(4).setResizable(false);
        }

        confirmBtn.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        confirmBtn.setText("Out For Delivery");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        enterpriseLabel.setText("<enterprise name>");

        cancelBtn.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmBtn)
                        .addGap(319, 319, 319)
                        .addComponent(cancelBtn))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn)))
                .addContainerGap(581, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(393, 393, 393)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(332, 332, 332)
                .addComponent(sendBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(390, 390, 390)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sendBtn)
                .addGap(58, 58, 58)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBtn)
                    .addComponent(cancelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(backBtn)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestjTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select any row");
            return;
        }
        
        PurchasingWorkRequest request = (PurchasingWorkRequest)requestjTable.getValueAt(selectedRow, 0);
        request.setOrderStatus("Hold");
        
        FinanceTestWorkRequest newrequest = new FinanceTestWorkRequest();
        newrequest.setDeliveryNumber(request.getDeliveryNumber());
        newrequest.getMaterial().setProductionModel(request.getMaterial().getProductionModel());
        newrequest.setQuantity(request.getQuantity());
        newrequest.setPrepareStatus("Waiting");
        newrequest.setCompanyName(request.getCompanyName());
        
        Organization org = null;
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (o instanceof Warehouse){
                org = o;
                break;
            }
        }
         
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(newrequest);
            account.getWorkQueue().getWorkRequestList().add(newrequest);
            JOptionPane.showMessageDialog(null, "Order Create Successful!");
            
            populateOrder();
            populateRequest();
        }
              
    }//GEN-LAST:event_sendBtnActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderjTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select any row");
            return;
        }
        
        FinanceTestWorkRequest request = (FinanceTestWorkRequest)orderjTable.getValueAt(selectedRow, 0);
        if (request.getPrepareStatus().equals("On The Way") || request.getPrepareStatus().equals("Delivered")){
            JOptionPane.showMessageDialog(null, "This order have already send to company");
            return;
        }
        if (!request.getPrepareStatus().equals("Ready to Send")){
            JOptionPane.showMessageDialog(null, "This order can not be send to company");
            return;
        }
        
        for (WorkRequest r : organization.getWorkQueue().getWorkRequestList()){
            if (r.getDeliveryNumber() == request.getDeliveryNumber()){
                ((PurchasingWorkRequest)r).setOrderStatus("On The Way");
                request.setPrepareStatus("Send");
                request.setDeliveryStatus(false);
                request.setFinanceStatus(false);
                break;
            }               
        }
        
        Organization org = null;
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (o instanceof FinanceDepartment){
                org = o;
                break;
            }
        }
         
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            JOptionPane.showMessageDialog(null, "Order has been sent!");
            
            populateOrder();
            populateRequest();
        }
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderjTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select any row");
            return;
        }
        
        FinanceTestWorkRequest request = (FinanceTestWorkRequest)orderjTable.getValueAt(selectedRow, 0);
        
        if (request.getPrepareStatus().equals("Send")){
            JOptionPane.showMessageDialog(null, "Can not cancel a sent order");
            return;
        }
        
        Organization org = null;
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (o instanceof Warehouse){
                org = o;
                break;
            }
        }
        
        //update the inventory if the goods of this order is already prepared
        if (request.getPrepareStatus().equals("Ready to Send")){
            for (Storage s : ((Warehouse)org).getInventory()){
                if (request.getMaterial().getProductionModel().equals(s.getMaterial().getProductionModel())){
                    s.setQuantity(s.getQuantity() + request.getQuantity());
                }
            }
        }
        //remove the order imformation from supplier's work queue
        for (WorkRequest r : organization.getWorkQueue().getWorkRequestList()){
            if (r.getDeliveryNumber() == request.getDeliveryNumber()){
                ((PurchasingWorkRequest)r).setOrderStatus("Canceled");
                account.getWorkQueue().getWorkRequestList().remove(request);
                org.getWorkQueue().getWorkRequestList().remove(request);
                break;
            }               
        }
        
        JOptionPane.showMessageDialog(null, "The order has been canceled");
        populateOrder();
        populateRequest();
    }//GEN-LAST:event_cancelBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderjTable;
    private javax.swing.JTable requestjTable;
    private javax.swing.JButton sendBtn;
    // End of variables declaration//GEN-END:variables
}
