/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.WarehouseRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Warehouse;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ProductionTestWorkRequest;
import Business.WorkQueue.Storage;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mac
 */
public class OrderConfirmationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderConfirmationJPanel
     */
    private JPanel container;
    private UserAccount account;
    private Enterprise enterprise;
    private Warehouse organization;
    
    public OrderConfirmationJPanel(JPanel container, UserAccount account, Warehouse organization, Enterprise enterprise) {
        initComponents();
        this.container = container;
        this.account = account;
        this.enterprise = enterprise;
        this.organization = organization;
        
        populateOrder();
    }
    
    private void populateOrder(){
        DefaultTableModel model = (DefaultTableModel) orderjTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()){
                Object[] row = new Object[4];
                row[0] = request;
                row[1] = request.getMaterial().getProductionModel();
                row[2] = request.getQuantity();
                row[3] = ((ProductionTestWorkRequest)request).getStatus();
                model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderjTable = new javax.swing.JTable();
        confirmBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        backBtn.setText("<<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("黑体", 1, 24)); // NOI18N
        jLabel2.setText("Order List");

        orderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "OrderNumber", "ProductModel", "Quantity", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderjTable);

        confirmBtn.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        confirmBtn.setText("Update Inventory");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(369, 369, 369)
                        .addComponent(confirmBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(402, 402, 402)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(199, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLabel2)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(confirmBtn)
                .addGap(66, 66, 66)
                .addComponent(backBtn)
                .addContainerGap(45, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CompanyWarehouseWorkPlaceJPanel panel = (CompanyWarehouseWorkPlaceJPanel) component;
        panel.populateOrder();
        panel.populateInventory();

        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderjTable.getSelectedRow();
        boolean flag = false;
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select any row");
            return;
        }
        
        ProductionTestWorkRequest request = (ProductionTestWorkRequest)orderjTable.getValueAt(selectedRow, 0);
        //check validation
        if (request.getStatus().equals("Finished")){
            JOptionPane.showMessageDialog(null, "This order have already finished");
            return;
        }
        if (!request.getStatus().equals("Delivered")){
            JOptionPane.showMessageDialog(null, "The Material Required Have Not Arrived");
            return;
        }
        
        //finish order;
        for (WorkRequest r : organization.getWorkQueue().getWorkRequestList()){
            if (r.getDeliveryNumber() == request.getDeliveryNumber()){
                //update order status
                ((ProductionTestWorkRequest)r).setStatus("Finished");
                request.setStatus("Finished");
                //update inventory
                if (request.getQuantity() > r.getQuantity()){
                    for (Storage s : organization.getInventory()){
                        if (s.getMaterial().getProductionModel().equals(request.getMaterial().getProductionModel())){
                            flag = true;
                            s.setQuantity(s.getQuantity() + request.getQuantity() - r.getQuantity());
                            break;
                        }
                    }
                    if (flag == false){
                        Storage newMaterial = new Storage();
                        newMaterial.getMaterial().setProductionModel(request.getMaterial().getProductionModel());
                        newMaterial.setQuantity(request.getQuantity() - r.getQuantity());
                        organization.getInventory().add(newMaterial);
                    }
                }
                break;
            }
        }
        JOptionPane.showMessageDialog(null, "The reqired material have been received");
        populateOrder();
    }//GEN-LAST:event_confirmBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderjTable;
    // End of variables declaration//GEN-END:variables
}
