/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PurchasingRole;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FinanceTestWorkRequest;
import Business.WorkQueue.ProductionTestWorkRequest;
import Business.WorkQueue.PurchasingWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mac
 */
public class PurchasingWorkPlaceJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PurchasingJPanel
     */
    private JPanel container;
    private UserAccount account;
    private Enterprise enterprise;
    private Organization organization;
    private Network network;
    
    public PurchasingWorkPlaceJPanel(JPanel container, UserAccount account, Organization organization, Enterprise enterprise, Network network) {
        initComponents();
        this.container = container;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.network = network;
        enterpriseLabel.setText(enterprise.getName());
        
        populateRequest();
        populateOrder();
    }
    
    public void populateRequest(){
        DefaultTableModel model = (DefaultTableModel) inventoryjTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            ProductionTestWorkRequest r = (ProductionTestWorkRequest)request;
            if (r.getStatus().equals("Waiting")){
                Object[] row = new Object[3];
                row[0] = request;
                row[1] = request.getMaterial().getProductionModel();
                row[2] = request.getQuantity();
                
                model.addRow(row);
            }
        }
    }
    
    public void populateOrder(){
        DefaultTableModel model = (DefaultTableModel) OrderjTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = ((PurchasingWorkRequest)request).getSupplierName();
                row[2] = request.getMaterial().getProductionModel();
                row[3] = request.getQuantity();
                row[4] = ((PurchasingWorkRequest)request).getOrderStatus();
                model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inventoryjTable = new javax.swing.JTable();
        creatBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderjTable = new javax.swing.JTable();
        confirmBtn = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        reorderBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("黑体", 1, 24)); // NOI18N
        jLabel1.setText("Enterprise: ");

        jLabel2.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        jLabel2.setText("Material Request List");

        inventoryjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Order Number", "ProductModel", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(inventoryjTable);

        creatBtn.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        creatBtn.setText("Creat Purchasing Order");
        creatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creatBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        jLabel3.setText("Order List");

        OrderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order Number", "SupplierName", "ProductModel", "Quantity", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(OrderjTable);
        if (OrderjTable.getColumnModel().getColumnCount() > 0) {
            OrderjTable.getColumnModel().getColumn(0).setResizable(false);
            OrderjTable.getColumnModel().getColumn(1).setResizable(false);
            OrderjTable.getColumnModel().getColumn(2).setResizable(false);
            OrderjTable.getColumnModel().getColumn(3).setResizable(false);
            OrderjTable.getColumnModel().getColumn(4).setResizable(false);
        }

        confirmBtn.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        confirmBtn.setText("Confirm Delivery");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        enterpriseLabel.setText("<enterprise name>");

        reorderBtn.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        reorderBtn.setText("Reorder");
        reorderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reorderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(confirmBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(reorderBtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(364, 364, 364)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(342, 342, 342)
                        .addComponent(creatBtn)))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(creatBtn)
                .addGap(38, 38, 38)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBtn)
                    .addComponent(reorderBtn))
                .addContainerGap(123, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void creatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creatBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = inventoryjTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        ProductionTestWorkRequest request = (ProductionTestWorkRequest)inventoryjTable.getValueAt(selectedRow, 0);
        //PurchasingWorkRequest newrequest = new PurchasingWorkRequest();
        //request.setStatus("Processing");
        
        GenerateOrderJPanel processWorkRequestJPanel = new GenerateOrderJPanel(container, request, network, account,enterprise);
        container.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_creatBtnActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = OrderjTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        PurchasingWorkRequest request = (PurchasingWorkRequest)OrderjTable.getValueAt(selectedRow, 0);
        if (request.getOrderStatus().equals("Delivered") || request.getOrderStatus().equals("Finished")){
            JOptionPane.showMessageDialog(null, "The order have already finished");
            return;
        }
        if (!request.getOrderStatus().equals("On The Way")){
            JOptionPane.showMessageDialog(null, "The order have not ship yet");
            return;
        }
             
        for (WorkRequest r : organization.getWorkQueue().getWorkRequestList()){
            if (r.getDeliveryNumber() == request.getDeliveryNumber()){
                //update order status
                ((ProductionTestWorkRequest)r).setStatus("Delivered");
                request.setOrderStatus("Delivered");
                //check material quantity
                if (request.getQuantity() != r.getQuantity()){
                    r.setQuantity(request.getQuantity());
                }
                break;
            }
        }
        populateOrder();
        populateRequest();
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void reorderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reorderBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = OrderjTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        PurchasingWorkRequest request = (PurchasingWorkRequest)OrderjTable.getValueAt(selectedRow, 0);
        if (request.getOrderStatus().equals("Canceled")){
            for (WorkRequest r : organization.getWorkQueue().getWorkRequestList()){
                if (r.getDeliveryNumber() == request.getDeliveryNumber()){
                    account.getWorkQueue().getWorkRequestList().remove(request);
                    GenerateOrderJPanel processWorkRequestJPanel = new GenerateOrderJPanel(container, (ProductionTestWorkRequest)r, network, account,enterprise, request.getSupplierName());
                    container.add("processWorkRequestJPanel", processWorkRequestJPanel);
                    CardLayout layout = (CardLayout) container.getLayout();
                    layout.next(container);
                }
            }
        }
        else 
            JOptionPane.showMessageDialog(null, "You can not reorder this order");
    }//GEN-LAST:event_reorderBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OrderjTable;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JButton creatBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JTable inventoryjTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton reorderBtn;
    // End of variables declaration//GEN-END:variables
}
